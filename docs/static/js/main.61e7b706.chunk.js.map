{"version":3,"sources":["sets.tsx","App.tsx","index.tsx"],"names":["sets","code","name","startDate","Date","endDate","maxLevel","rewards","require","xpToLevel","xp","Math","floor","getTimeLeft","dateInput","set","isInitial","date","daysLeft","sundaysLeft","getUTCHours","setUTCDate","getUTCDate","setUTCHours","getUTCDay","questsLeft","formatDate","toLocaleDateString","month","day","getXPForDate","winsPerDay","arguments","length","undefined","winsPerWeek","questWins","xpPerDay","min","xpPerWeek","SliderInput","_ref","value","onChange","label","max","step","_jsxs","style","margin","color","display","children","_jsx","type","event","Number","target","width","FormattedXP","_ref2","formattedXP","toString","padStart","slice","fontSize","sortKeys","getSortKey","item","key","RegExp","test","RewardItem","_ref3","count","subitems","className","Array","from","entries","sort","_ref4","_ref5","a","b","localeCompare","map","_ref6","subitem","reduce","prev","curr","_Fragment","aggregateRewards","startLevel","endLevel","aggregated","Map","aggregatedSubitems","level","forEach","_ref7","_aggregated$get","get","_subitems$get","list","push","subitemCounts","_subitemCounts$get","_ref8","App","now","setNow","useState","setSet","filter","latest","presentSet","nowClipped","questCompletion","setQuestCompletion","dailyWins","setDailyWins","weeklyWins","setWeeklyWins","currentXP","setCurrentXP","remQuests","setRemQuests","remDailyWins","setRemDailyWins","remWeeklyWins","setRemWeeklyWins","timeRemainaing","diff","getTime","days","hours","minutes","getDifferenceInTime","totalXP","remainingXP","estimatedXP","maxXP","graphDates","intervalHours","dates","currentDate","setHours","getHours","getDatesBetween","useEffect","interval","setInterval","clearInterval","chartData","labels","datasets","data","d","borderColor","backgroundColor","fill","pointRadius","e","_sets$find","find","s","concat","v","border","padding","Line","reward","_objectSpread","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.61e7b706.chunk.js","sourcesContent":["\nexport type Rewards = Array<Array<[number, string, string]>>;\nexport interface Set {\n  code: string;\n  name: string;\n  startDate: Date;\n  endDate: Date;\n  maxLevel?: number;\n  rewards?: Rewards;\n}\nexport const sets: Set[] = [\n  {\n    code: \"LCI\",\n    name: \"Lost Caverns of Ixalan\",\n    startDate: new Date(\"2023-11-14T17:00:00Z\"),\n    endDate: new Date(\"2024-02-06T13:00:00Z\"),\n    maxLevel: 90,\n    rewards: require(\"./data/rewardsLCI.json\"),\n  },\n  {\n    code: \"MKM\",\n    name: \"Murders at Karlov Manor\",\n    startDate: new Date(\"2024-02-06T17:00:00Z\"),\n    endDate: new Date(\"2024-04-16T13:00:00Z\"),\n    maxLevel: 70,\n    rewards: require(\"./data/rewardsMKM.json\"),\n  },\n  {\n    code: \"OTJ\",\n    name: \"Outlaws of Thunder Junction\",\n    startDate: new Date(\"2024-04-16T17:00:00Z\"),\n    endDate: new Date(\"2024-07-30T13:00:00Z\"),\n    maxLevel: 110,\n    rewards: require(\"./data/rewardsOTJ.json\"),\n  },\n  {\n    code: \"BLB\",\n    name: \"Bloomburrow\",\n    startDate: new Date(\"2024-07-30T17:00:00Z\"),\n    endDate: new Date(\"2024-09-24T13:00:00Z\"),\n    maxLevel: 60,\n    rewards: require(\"./data/rewardsBLB.json\"),\n  },\n  {\n    code: \"DSK\",\n    name: \"Duskmourn: House of Horror\",\n    startDate: new Date(\"2024-09-24T17:00:00Z\"),\n    endDate: new Date(\"2024-11-12T13:00:00Z\"),\n    maxLevel: 60,\n    rewards: require(\"./data/rewardsDSK.json\"),\n  },\n  {\n    code: \"FDN\",\n    name: \"Foundations\",\n    startDate: new Date(\"2024-11-12T17:00:00Z\"),\n    endDate: new Date(\"2025-02-11T13:00:00Z\"),\n    maxLevel: 90,\n    rewards: require(\"./data/rewardsFDN.json\"),\n  },\n  {\n    code: \"DFT\",\n    name: \"Aetherdrift\",\n    startDate: new Date(\"2025-02-11T17:00:00Z\"),\n    endDate: new Date(\"2025-04-08T13:00:00Z\"),\n    maxLevel: 60,\n    rewards: require(\"./data/rewardsDFT.json\"),\n  },\n  {\n    code: \"TDM\",\n    name: \"Tarkir: Dragonstorm\",\n    startDate: new Date(\"2025-04-08T17:00:00Z\"),\n    endDate: new Date(\"2025-06-10T13:00:00Z\"),\n    maxLevel: 70,\n    rewards: require(\"./data/rewardsTDM.json\"),\n  },\n  {\n    code: \"FIN\",\n    name: \"Final Fantasy\",\n    startDate: new Date(\"2025-06-10T17:00:00Z\"),\n    endDate: new Date(\"2025-07-29T13:00:00Z\"),\n  },\n  {\n    code: \"EOE\",\n    name: \"Edge of Eternities\",\n    startDate: new Date(\"2025-07-29T17:00:00Z\"),\n    endDate: new Date(\"2025-09-23T13:00:00Z\"),\n  },\n  {\n    code: \"SPM\",\n    name: \"Marvel's Spider-Man\",\n    startDate: new Date(\"2025-09-23T17:00:00Z\"),\n    endDate: new Date(\"2025-11-18T13:00:00Z\"),\n  }\n];\n","import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Set, sets, Rewards } from './sets';\nimport './styles/App.css';\n\nfunction presentSet(now: Date): Set {\n  return sets.filter(set => set.startDate <= now).reduce((latest, set) => set.startDate > latest.startDate ? set : latest);\n}\n\nfunction xpToLevel(xp: number): number {\n  return Math.floor(xp / 1000) + 1;\n}\n\nfunction getDifferenceInTime(startDate: Date, endDate: Date): { days: number, hours: number, minutes: number } {\n  const diff = endDate.getTime() - startDate.getTime();\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24));\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\n  return { days, hours, minutes };\n}\n\nfunction getDatesBetween(set: Set, intervalHours: number): Date[] {\n  const dates = [];\n  let currentDate = new Date(set.startDate);\n\n  for(;;) {\n    dates.push(new Date(currentDate));\n    if (currentDate > set.endDate) break;\n    currentDate.setHours(currentDate.getHours() + intervalHours);\n  }\n  return dates;\n}\n\nfunction getTimeLeft(dateInput: Date, set: Set) {\n  const isInitial = dateInput <= set.startDate ? 1 : 0;\n  const date = new Date(dateInput);\n  let daysLeft = 0;\n  let sundaysLeft = 0;\n  const targetHour = 9; // 9am UTC is the daily reset\n  if (date.getUTCHours() >= targetHour) {\n    date.setUTCDate(date.getUTCDate() + 1);\n  }\n  date.setUTCHours(targetHour);\n\n  while (date < set.endDate) {\n    daysLeft++;\n    if (date.getUTCDay() === 0) sundaysLeft++;\n    date.setUTCDate(date.getUTCDate() + 1);\n  }\n\n  return {\n    daysLeft: daysLeft + isInitial,\n    sundaysLeft: sundaysLeft + isInitial,\n    questsLeft: daysLeft + isInitial * 3,\n  };\n}\nfunction formatDate(date: Date): string {\n  const options: Intl.DateTimeFormatOptions = { month: 'short', day: '2-digit' };\n  return date.toLocaleDateString('en-US', options);\n}\n\n\nfunction getXPForDate(date: Date, set: Set, winsPerDay: number = 10, winsPerWeek: number = 15, questWins?: number): number {\n  const xpPerDay = Math.min(winsPerDay, 10) * 25;\n  const xpPerWeek = Math.min(winsPerWeek, 15) * 250;\n  const xpPerQuest = 500;\n  const {daysLeft, sundaysLeft, questsLeft} = getTimeLeft(date, set);\n  return xpPerDay * daysLeft + xpPerWeek * sundaysLeft + xpPerQuest * (questWins !== undefined ? Math.min(questsLeft, questWins): questsLeft);\n}\n\n\ninterface SliderInputProps {\n    value: number;\n    onChange: (value: number) => void;\n    label: string;\n    min: number;\n    max: number;\n    step?: number;\n}\n\nconst SliderInput: React.FC<SliderInputProps> = ({ value, onChange, label, min, max, step }) => {\n    const handleSliderChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(Number(event.target.value));\n    };\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(Number(event.target.value));\n    };\n\n    return (\n        <div style={{ margin: '10px', color: 'white', display: 'flex' }}>\n            <label>{label}</label>\n            <input\n                type=\"number\"\n                value={value}\n                onChange={handleInputChange}\n                min={min}\n                max={max}\n                step={step}\n                style={{ margin: '0 10px', width: '60px' }}\n            />\n            <input\n                type=\"range\"\n                min={min}\n                max={max}\n                step={step}\n                value={value}\n                onChange={handleSliderChange}\n                style={{ width: '200px' }}\n            />\n        </div>\n    );\n};\n\nconst FormattedXP = ({ xp }: { xp: number }) => {\n  const formattedXP = xp.toString().padStart(4, '0');\n\n  return (\n    <span>\n      {formattedXP.slice(0, -3)}\n      <span style={{ fontSize: '0.8em', color: '#aaa' }}>{formattedXP.slice(-3)}</span>\n    </span>\n  );\n};\n\nconst sortKeys: [ RegExp | String, number ][] = [\n  [ 'Gems', 0 ],\n  [ 'Gold', 1 ],\n  [ 'Booster', 2 ],\n  [ /Draft Token/, 3 ],\n  [ /\\bICR\\b/, 4 ],\n  [ /\\bCard$/, 4 ],\n  [ 'Orb', 5 ],\n  [ /\\bCS\\b/, 9 ],\n  [ /\\bPet\\b|\\bCompanion\\b/, 6 ],\n  [ /\\bAvatar\\b/, 7 ],\n  [ /\\bSleeve\\b/, 8 ],\n  [ /\\bEmote\\b/, 10 ],\n]\nconst getSortKey = (item: string) => {\n  for (const [key, value] of sortKeys) {\n    if (key instanceof RegExp ? key.test(item) : item === key) return value;\n  }\n  return 99;\n};\n\ninterface RewardItemProps {\n  item: string;\n  count: number;\n  subitems?: Map<string, number>;\n}\nconst RewardItem: React.FC<RewardItemProps> = ({ item, count, subitems }) => (\n  <li key={item} className={'reward_' + getSortKey(item)}>{count} {item}\n    {subitems && <span style={{fontSize:'75%'}}> (\n      {Array.from(subitems.entries())\n        .sort(([a], [b]) => a.localeCompare(b))\n        .map(([subitem, count]) => (\n          count > 1 ? <span>{count}x {subitem}</span> : <span>{subitem}</span>\n        ))\n        .reduce((prev, curr) => <>{prev}, {curr}</>)}\n    )</span>\n    }\n  </li>\n);\n\nconst aggregateRewards = (rewards: Rewards, startLevel: number, endLevel: number) => {\n  const aggregated = new Map<string, number>();\n  const subitems = new Map<string, string[]>();\n  const aggregatedSubitems = new Map<string, Map<string, number>>();\n\n  for (let level = startLevel; level <= endLevel; level++) {\n    const idx = Math.min(level - 1, rewards.length - 1);\n    rewards[idx].forEach(([count, item, subitem]: [number, string, string]) => {\n        aggregated.set(item, (aggregated.get(item) ?? 0) + count);\n        if (subitem) {\n          const list = subitems.get(item) ?? [];\n          list.push(subitem);\n          subitems.set(item, list);\n        }\n    });\n  }\n  subitems.forEach((list, item) => {\n    const subitemCounts = new Map<string, number>();\n    list.forEach(subitem => {\n    subitemCounts.set(subitem, (subitemCounts.get(subitem) ?? 0) + 1);\n    });\n    aggregatedSubitems.set(item, subitemCounts);\n  });\n\n  return Array.from(aggregated.entries())\n    .map(([item, count]) => ({ item, count, subitems: aggregatedSubitems.get(item) }))\n    .sort((a, b) => getSortKey(a.item) - getSortKey(b.item));\n};\n\nconst App = () => {\n  const [now, setNow] = useState(new Date());\n  const [set, setSet] = useState(presentSet(now));\n  const nowClipped = now < set.startDate ? set.startDate : now;\n  const {questsLeft} = getTimeLeft(nowClipped, set);\n  const [questCompletion, setQuestCompletion] = useState<number | undefined>(undefined);\n  const [dailyWins, setDailyWins] = useState(4);  \n  const [weeklyWins, setWeeklyWins] = useState(15);\n  const [currentXP, setCurrentXP] = useState(0);\n  const [remQuests, setRemQuests] = useState(0);\n  const [remDailyWins, setRemDailyWins] = useState(0);\n  const [remWeeklyWins, setRemWeeklyWins] = useState(0);\n  const timeRemainaing = getDifferenceInTime(nowClipped, set.endDate);\n  const totalXP = getXPForDate(set.startDate, set);\n  const remainingXP = getXPForDate(nowClipped, set);\n  const estimatedXP = getXPForDate(nowClipped, set, dailyWins, weeklyWins, questCompletion);\n  const maxXP = estimatedXP + currentXP + remQuests * 500 + remDailyWins * 25 + remWeeklyWins * 250;\n  const graphDates = getDatesBetween(set, 24);\n  const maxLevel = set.maxLevel;\n\n  useEffect(() => {\n    const interval = setInterval(() => setNow(new Date()), 60000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const chartData = {\n    labels: Array.from(graphDates, formatDate),\n    datasets: [\n      {\n        label: 'Total XP',\n        data: Array.from(graphDates, d => totalXP - getXPForDate(d, set)),\n        borderColor: 'white',\n        backgroundColor: 'rgba(255, 255, 255, 0.6)',\n        fill: false,\n      },\n      {\n        label: 'Projected XP',\n        data: Array.from(graphDates, d => d < now ? undefined : estimatedXP - getXPForDate(d, set, dailyWins, weeklyWins, questCompletion) + maxXP - estimatedXP),\n        borderColor: 'yellow',\n        backgroundColor: 'rgba(255, 255, 0, 0.5)',\n        fill: false,\n      },\n      ...(maxLevel ? [{\n        label: 'Max Level XP',\n        data: Array.from(graphDates, d => (maxLevel-1)*1000),\n        borderColor: 'green',\n        backgroundColor: 'rgba(0, 255, 0, 0.2)',\n        fill: false,\n        pointRadius: 0,\n      }] : []),\n    ],\n  };\n\n\n  return (\n    <div className=\"app\">\n        <select value={set.code} onChange={e => setSet(sets.find(s => s.code === e.target.value) ?? set)}>\n          {sets.map(s => (\n            <option key={s.code} value={s.code}>\n              {s.name}\n            </option>\n          ))}\n        </select>\n      <h1>MTGA Mastery Calculator</h1>\n      <div className=\"info\">\n        <h3><span className='large'>{set.name}: {formatDate(set.startDate)} - {formatDate(set.endDate)}</span></h3>\n        <h3>Time Remaining: {now > set.endDate ? \"Expired\" : `${timeRemainaing.days}d ${timeRemainaing.hours}h ${timeRemainaing.minutes}m`}</h3>\n        <h2>Remaining XP: <span className=\"large\"><FormattedXP xp={remainingXP}/></span>/<FormattedXP xp={totalXP}/></h2>\n      </div>\n      <div className=\"container\">\n        <SliderInput\n          label=\"Expected quest completion\"\n          value={Math.min(questCompletion ?? questsLeft, questsLeft)}\n          onChange={v => setQuestCompletion(v)}\n          min={0}\n          max={questsLeft}\n        />\n        <SliderInput\n          label=\"Expected daily wins\"\n          value={dailyWins}\n          onChange={v => {\n            setDailyWins(v);\n            setWeeklyWins(Math.max(weeklyWins, v));\n          }}\n          min={0}\n          max={15}\n        />\n        <SliderInput\n          label=\"Expected weekly wins\"\n          value={weeklyWins}\n          onChange={v => setWeeklyWins(v)}\n          min={0}\n          max={15}\n        />\n      </div>\n      <div className=\"info\">\n        <h2>Projcted XP to earn: <span className=\"large\"><FormattedXP xp={estimatedXP}/></span></h2>\n      </div>\n      <div className=\"chart\">\n        <div style={{ border: '1px solid white', padding: '20px' }}>\n            <Line data={chartData} />\n        </div>\n      </div>\n      <div className=\"container\">\n      <SliderInput\n        label=\"Current Level\"\n        value={xpToLevel(currentXP)}\n        onChange={v => setCurrentXP(level => level % 1000 + (v - 1) * 1000)}\n        min={1}\n        max={100}\n      />\n      <SliderInput\n        label=\"Current XP\"\n        value={currentXP%1000}\n        onChange={v => setCurrentXP(level => level - level % 1000 + v)}\n        min={0}\n        max={975}\n        step={25}\n      />\n      </div>\n      <div className='container'>\n      <SliderInput\n        label=\"Incomplete Quests\"\n        value={remQuests}\n        onChange={v => setRemQuests(v)}\n        min={0}\n        max={3}\n      />\n      <SliderInput\n        label=\"Incomplete Daily Wins\"\n        value={remDailyWins}\n        onChange={v => setRemDailyWins(v)}\n        min={0}\n        max={10}\n      />\n      <SliderInput\n        label=\"Incomplete Weekly Wins\"\n        value={remWeeklyWins}\n        onChange={v => setRemWeeklyWins(v)}\n        min={0}\n        max={15}\n      />\n      </div>\n      <div className=\"info\">\n        <h2>Target level: <span className=\"large\">{xpToLevel(maxXP)}</span>{maxLevel && <span>/{maxLevel}</span>}</h2>\n      </div>\n      {set.rewards &&\n      <div className=\"rewards\">\n        <div>\n          <h2>Current rewards</h2>\n          <ul>\n            {aggregateRewards(set.rewards, xpToLevel(0), xpToLevel(currentXP)).map(reward => <RewardItem {...reward} />)}\n          </ul>\n        </div>\n        <div>\n          <h2>Expected rewards</h2>\n          <ul>\n            {aggregateRewards(set.rewards, xpToLevel(currentXP) + 1, xpToLevel(maxXP)).map(reward => <RewardItem {...reward} />)}\n          </ul>\n        </div>\n        <div>\n          <h2>Missed rewards</h2>\n          <ul>\n            {aggregateRewards(set.rewards, xpToLevel(maxXP) + 1, xpToLevel(totalXP)).map(reward => <RewardItem {...reward} />)}\n          </ul>\n        </div>\n      </div>\n      }\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}